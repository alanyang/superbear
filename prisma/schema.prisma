// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  name        String    @db.VarChar(128)
  nick        String?   @db.VarChar(128)
  password    String
  status      Int       @default(0) //0 unactived, 1 actived, 2 locked
  avatar      String?   @db.Text
  posts       Post[]
  comments    Comment[]
  // roles       Role[]
  tags        Tag[]
  profile     Profile?
  createAt    DateTime  @default(now())
  updateAt    DateTime? @updatedAt
  lastLoginAt DateTime?
  profileId   String?
}

model Profile {
  id       String    @id @default(uuid())
  phone    String?   @db.VarChar(36)
  slogan   String?   @db.Text
  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id])
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
}

model Post {
  id       String    @id @default(uuid())
  title    String    @db.VarChar(2048)
  content  String    @db.Text
  comments Comment[]
  tags     Tag[]
  author   User?     @relation(fields: [userId], references: [id])
  userId   String?
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
}

model Comment {
  id       String    @id @default(uuid())
  content  String    @db.Text()
  post     Post?     @relation(fields: [postId], references: [id])
  postId   String?
  creator  User?     @relation(fields: [userId], references: [id])
  userId   String?
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique @db.VarChar(128)
  posts    Post[]
  creator  User?     @relation(fields: [userId], references: [id])
  userId   String?
  createAt DateTime  @default(now())
  updateAt DateTime? @updatedAt
}

// model Role {
//   id             String          @id @default(uuid())
//   name           String          @unique @db.VarChar(64)
//   description    String          @db.Text
//   users          User[]
//   permissions    Permission[]
//   urlPermissions UrlPermission[]
//   createAt       DateTime        @default(now())
// }

// model Permission {
//   id          String   @id @default(uuid())
//   name        String?  @db.VarChar(64)
//   description String?  @db.Text
//   table       String   @db.VarChar(64) //table name, if is * mean all table
//   item        String?  @db.VarChar(72) //col id ,if null mean all table
//   model       String   @db.VarChar(16) //like unix chmod, not execution flag. 2 only write, 4 only read, 6 write read
//   roles       Role[]
//   createAt    DateTime @default(now())
// }

// model UrlPermission {
//   id          String   @id @default(uuid())
//   name        String?  @db.VarChar(64)
//   description String?  @db.Text
//   url         String   @db.Text //relative urlï¼Œ example /user/$id /post/$id , * mean all url
//   model       String   @db.VarChar(16) //like unix chmod, not execution flag. 0 forbidden, 4 allow
//   roles       Role[]
//   createAt    DateTime @default(now())
// }
